<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
		
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
		
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="appProps">
  		<beans:property name="locations">
  			<beans:list>
  				<beans:value>WEB-INF/offline.properties</beans:value>
  			</beans:list>
  		</beans:property>
	    <beans:property name="fileEncoding" value="UTF-8" />
 	</beans:bean>
 	
 	<beans:bean id="vmpub" class="ion.offline.adapter.web.ViewModelPublisher" />
 	
 	<beans:bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    	<beans:property name="jndiName" value="java:comp/env/${db.jndi}" />
	</beans:bean>	
 	
 	<!--  
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${db.driver}" 
		p:url="${db.url}"
		p:username="${db.user}" 
		p:password="${db.password}" />
	-->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/files/**" location="/resources/files" />
	
	<beans:bean name="servletPaths" class="ion.web.util.com.ServletPaths" />
	
	<beans:bean name="themeResourceHandler" class="ion.web.util.com.ThemeResourceHandler">
		<beans:property name="themeDir" value="${app.themeDir}" />
	</beans:bean>

	<beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<beans:property name="order" value="-1"/>
    	<beans:property name="urlMap">
        	<beans:map>
            	<beans:entry key="/vm/**" value-ref="vmpub" />
            	<beans:entry key="/resources/**" value-ref="themeResourceHandler"/>
        	</beans:map>
    	</beans:property>
	</beans:bean>	
				
	<resources mapping="/files/**" location="/resources/files/" order="-2"/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<beans:property name="maxUploadSize" value="10000000"/>
	</beans:bean>
	
	<beans:bean name="appsList" class="ion.web.util.com.AppList" /> 		
	
	<tx:annotation-driven transaction-manager="transactionManager" />	
	
	<context:component-scan base-package="ion.offline.adapter.web" />
		
	<beans:bean id="logger" class="ion.web.util.com.WebAppLogger" />
	
	<beans:bean id="sFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="packagesToScan">
			<beans:array>
				<beans:value>ion.offline.server.entity</beans:value>
			</beans:array>
		</beans:property>		
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.connection.zeroDateTimeBehavior">convertToNull</beans:prop> 
				<beans:prop key="hibernate.show_sql">false</beans:prop>
				<beans:prop key="hibernate.dialect">${db.dialect}</beans:prop>
				<beans:prop key="hibernate.connection.charSet">UTF-8</beans:prop>				
			</beans:props>
		</beans:property>
	</beans:bean>	
		
	<beans:bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sFactory" />
	</beans:bean>	
	
	<beans:bean id="authContext" class="ion.offline.adapter.util.AdapterAuthContext">
	</beans:bean>
			
	<beans:bean id="pointDAO" class="ion.offline.adapter.data.PointDAO">		
		<beans:property name="sessionFactory" ref="sFactory"/>
	</beans:bean>
	
	<beans:bean id="dataPackageDAO" class="ion.offline.adapter.data.DataPackageDAO">		
		<beans:property name="sessionFactory" ref="sFactory"/>
	</beans:bean>
	
	<beans:bean id="userDAO" class="ion.offline.adapter.data.UserDAO">		
		<beans:property name="sessionFactory" ref="sFactory"/>
	</beans:bean>
	
	<beans:bean id="zipArchivator" class="ion.offline.data.ZipVolumeProcessor">		
		<beans:constructor-arg type="int" value="10240" />
	</beans:bean>
	
	<beans:bean id="signatureProvider" class="ion.offline.security.SignatureProvider">
		<beans:property name="keyAlgo" value="DSA"/>
		<beans:property name="signAlgo" value="SHA1withDSA"/>
		<beans:property name="securityProvider" value="SUN"/>
		<beans:property name="randomizeAlgo" value="SHA1PRNG"/>
		<beans:property name="keySize" value="1024"/>
	</beans:bean>
	
	<beans:bean id="hashProvider" class="ion.offline.security.HashProvider" />
	
	<beans:bean id="packager" class="ion.offline.server.PackageQueue">
		<beans:property name="hashProvider" ref="hashProvider" />
		<beans:property name="logger" ref="logger" />
		<beans:property name="dataPackageDAO" ref="dataPackageDAO" />
		<beans:property name="volumeProcessor" ref="zipArchivator" />
		<beans:property name="urlBase" value="${app.urlBase}" />
	</beans:bean>

	<beans:bean id="adapter" class="ion.offline.adapters.SitexServicePortalAdapterFactory">
		<beans:property name="hasher" ref="hashProvider" />
		<beans:property name="sysLogin" value="${ppu.login}" />
		<beans:property name="sysToken" value="${ppu.token}" />
		<beans:property name="ppuUrl" value="${ppu.url}" />
		<beans:property name="userWsdl" value="${ppu.wsdl}" />
		<beans:property name="mainWsdl" value="${ppu.digestTplWsdl}"></beans:property>
		<beans:property name="version" value="2"></beans:property>
		<beans:property name="digestTemplatesUrl" value="${ppu.digestTplWsdl}" />
		<beans:property name="debug" value="true" />
		<beans:property name="connectTimeout" value="${ppu.connectTimeout}" />
		<beans:property name="readTimeout" value="${ppu.readTimeout}" />
		<beans:property name="classTypeTitles">
			<beans:map>
				<beans:entry key="federal" value="Федеральные сервисы" />
				<beans:entry key="petition" value="Услуги" />
				<beans:entry key="other" value="Прочие" />				
			</beans:map>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="syncSession" class="ion.offline.server.SimpleSyncSession">
		<beans:property name="adapterFactory" ref="adapter" />
		<beans:property name="hashProvider" ref="hashProvider" />
		<beans:property name="packages" ref="packager" />
		<beans:property name="volumeProcessor" ref="zipArchivator" />
		<beans:property name="pointDAO" ref="pointDAO" />
		<beans:property name="userDAO" ref="userDAO" />
	</beans:bean>
		
	<beans:bean class="ion.offline.adapter.web.ContextSetup" />
</beans:beans>
